<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shopper+ Team Blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://shopperplus.github.io/blog/</link>
    <atom:link href="http://shopperplus.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 04 Jan 2015 02:00:32 +0800</pubDate>
    <lastBuildDate>Sun, 04 Jan 2015 02:00:32 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>ActiveRecord Object Instantiate and Clone</title>
        <description>&lt;h2&gt;initialize&lt;/h2&gt;

&lt;p&gt;最常用的就是使用&lt;code&gt;new&lt;/code&gt;方法初始化一个&lt;code&gt;AR&lt;/code&gt;对象，比如 &lt;code&gt;User.new(:name =&amp;gt; &amp;quot;user name&amp;quot;)&lt;/code&gt;. &lt;code&gt;new&lt;/code&gt; 方法通过 &lt;code&gt;initialize&lt;/code&gt; 方法构造出一个新对象。大家几乎天天在用这个方法，不多说了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L276-L297

def initialize(attributes = nil, options = {})
  @attributes = self.class._default_attributes.dup

  init_internals
  initialize_internals_callback

  self.class.define_attribute_methods
  # +options+ argument is only needed to make protected_attributes gem easier to hook.
  # Remove it when we drop support to this gem.
  init_attributes(attributes, options) if attributes

  yield self if block_given?
  _run_initialize_callbacks
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;allocate + init_with&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt; 方法构造出来的对象在你未save之前都是 &lt;code&gt;new_record&lt;/code&gt;，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;user.new_record? #=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一些场景，我们已经有了对象&lt;code&gt;id&lt;/code&gt;和Raw Attributes，我们想要初始化一个AR对象。最经典的场景就是从缓存读出Raw Attributes之后。这时，使用 &lt;code&gt;new&lt;/code&gt; 方法就不合适。还好，Rails 给我们提供了一个后门：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L309-L322
user = User.allocate
user.init_with(&amp;quot;attributes&amp;quot; =&amp;gt; attributes, &amp;quot;new_record&amp;quot; =&amp;gt; false)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们知道，一个对象由类定义和属性组成，已知类定义之后，我们只要把属性填充给实例对象就完成了初始化过程。其实，这也绕过了使用&lt;code&gt;new&lt;/code&gt;方法来构造对象所需的内部复杂工序。&lt;/p&gt;

&lt;h2&gt;instancate&lt;/h2&gt;

&lt;p&gt;除此之外，如果你的attributes数据是从&lt;code&gt;DB&lt;/code&gt;获取来的，你可以使用更高级的&lt;code&gt;instancate&lt;/code&gt;方法，它对来源数据进行一次类型转换，然后再调用上述的 &lt;code&gt;allocate&lt;/code&gt; + &lt;code&gt;init_with&lt;/code&gt;。&lt;code&gt;find_by_sql&lt;/code&gt; 和&lt;code&gt;STI&lt;/code&gt;就是直接依赖 &lt;code&gt;instancate&lt;/code&gt; 来初始化AR 对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/298ec6de55e3adb7d012ba6a9db8b4dd5fd95779/activerecord/lib/active_record/persistence.rb#L56-L70

def instantiate(attributes, column_types = {})
  klass = discriminate_class_for_record(attributes)
  attributes = klass.attributes_builder.build_from_database(attributes, column_types)
  klass.allocate.init_with(&amp;#39;attributes&amp;#39; =&amp;gt; attributes, &amp;#39;new_record&amp;#39; =&amp;gt; false)
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;initialize_dup&lt;/h2&gt;

&lt;p&gt;如果我们已经有了一个存在的AR记录，想再初始化一个的话，使用&lt;code&gt;clone&lt;/code&gt;或&lt;code&gt;dup&lt;/code&gt;也是可行的。关于&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;区别，我觉得下面这段代码描述是最清晰的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class Object
  def clone
    clone = self.class.allocate

    clone.copy_instance_variables(self)
    clone.copy_singleton_class(self)

    clone.initialize_clone(self)
    clone.freeze if frozen?

    clone
  end

  def dup
    dup = self.class.allocate
    dup.copy_instance_variables(self)
    dup.initialize_dup(self)
    dup
  end

  def initialize_clone(other)
    initialize_copy(other)
  end

  def initialize_dup(other)
    initialize_copy(other)
  end

  def initialize_copy(other)
    # some internal stuff (don&amp;#39;t worry)
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;的区别这里不是重点，想说一下 &lt;code&gt;initialize_dup&lt;/code&gt; 钩子。 &lt;code&gt;initialize_dup&lt;/code&gt; 是AR内置的，我们在调用 &lt;code&gt;user.dup&lt;/code&gt; 时，底层调用的其实是它。注意，&lt;code&gt;user.dup&lt;/code&gt; 放回对象把id重置为空了，就是说这是一个 shallow copy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L325-L364

def initialize_dup(other) # :nodoc:
  @attributes = @attributes.dup
  @attributes.reset(self.class.primary_key)

  _run_initialize_callbacks

  @aggregation_cache = {}
  @association_cache = {}

  @new_record  = true
  @destroyed   = false

  super
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Question&lt;/h2&gt;

&lt;p&gt;那么问题来了:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为什么AR要自己实现一个 &lt;code&gt;initialize_dup&lt;/code&gt;，直接dup不行么？&lt;/li&gt;
&lt;li&gt;我们在缓存的时候是直接把 AR 对象塞进去（即：&lt;code&gt;Rails.cache.write user.id, user&lt;/code&gt;），还是自己序列化反序列化？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://thekaiway.com/2013/07/26/assemble-ar-object/&lt;/li&gt;
&lt;li&gt;http://thekaiway.com/2013/09/08/read-write-activerecord-attribute/&lt;/li&gt;
&lt;li&gt;http://www.jonathanleighton.com/articles/2011/initialize&lt;em&gt;clone-initialize&lt;/em&gt;dup-and-initialize_copy-in-ruby/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2015/01/01/activerecord-object-instantiate-and-clone.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2015/01/01/activerecord-object-instantiate-and-clone.html</guid>
        
        
      </item>
    
      <item>
        <title>How search and index works?</title>
        <description>&lt;p&gt;这篇文章主要目的是简单介绍搜索引擎的检索过程，并通过简单的Ruby代码实现。当然，由于本人能力有限，对搜索也是一知半解，注定话题不会太深，也不会太广...这不是 Solr 配置详解这种过于务实的话题，也不是某个搜索排序算法的深入研究的高深话题。&lt;/p&gt;

&lt;h2&gt;Tokenize (分词)&lt;/h2&gt;

&lt;p&gt;Tokenize 的过程是把Query或待索引的文本拆成最小的单元，也就是分词。包括以下过程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preprocess text

&lt;ul&gt;
&lt;li&gt;Synonym substitution&lt;/li&gt;
&lt;li&gt;Remove illegal expressions&lt;/li&gt;
&lt;li&gt;Remove stopwords.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Splitting and preparations for tokenizing

&lt;ul&gt;
&lt;li&gt;Split the text into words.&lt;/li&gt;
&lt;li&gt;Truncate the amount of tokens.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating tokens / strings

&lt;ul&gt;
&lt;li&gt;Downcase each token.&lt;/li&gt;
&lt;li&gt;Stemming each token.
*&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Synonym Rings&lt;/strong&gt; (同义词环)
同义词环（如图），把一组定义为等价关系的词汇连接起来，以提供搜索之用。事实上，这些词通常不是真正的同义词。例如，你在检查搜索日志，并和用户对话之后，你将发现不同的人在寻找同样的东西时，会输入不同的术语。某人要找 food processor（食物搅拌机），可能输入 &lt;code&gt;blender&lt;/code&gt; (搅拌机)，或下图中任何一个术语（或者常见的错误拼法）。不同类型网站，有着各自领域的同义词。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fd218a73442258bb08528d3f02e7e47c0e57c110/687474703a2f2f7365616e636f6e6e6f6c6c792e63612f7765622f303539363532373334392f696d616765732f696e666f335f303930322e6a7067&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stopwords&lt;/strong&gt; （停词）正如字面意思，停词。有些高频词，例如“a”，对用户查询的意义不大，同时在索引中又占据比较多的资源，最重要的是这些词还会影响匹配文档的相关度，所以，干脆在分词的时候就把它去掉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automatic Stemming&lt;/strong&gt; (自动词干)功能，是搜索引擎的一个实用功能，把一个术语扩展，包含其他共享相同词干的术语。如果词干搜索机制很强，可能会把 &lt;code&gt;computer&lt;/code&gt; 这个搜索术语视为和 &lt;code&gt;computers&lt;/code&gt;、&lt;code&gt;computation&lt;/code&gt;、&lt;code&gt;computing&lt;/code&gt; 甚至 &lt;code&gt;comput&lt;/code&gt; 这些术语共享相同的词干 &lt;code&gt;comput&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4e33f7f06e36361d59382ba60eb926564396b81d/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f617765736f6d655f73637265656e73686f742f363839303733343f4157534163636573734b657949643d305237464d57374158525643594d41505450523226457870697265733d31343139373632303333265369676e61747572653d7547716759664e66736a636f6d396e4e69465766787174394c3130253344&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;其他过程很容易理解了，整个Tokenize用Ruby代码的简单表示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def tokenize(text)
  text.gsub(/&amp;amp;/, &amp;quot;and&amp;quot;).                      # Synonym substitution
       gsub(/[^\w\s]+/, &amp;quot;&amp;quot;).                  # Remove illegal expressions
       gsub(/\b(a|an|is)\b/i, &amp;quot;&amp;quot;).            # Remove stopwords
       split(/\s+/).map do |token|            # Split the text into words
         token.downcase.sub(/(.*?)s\Z/, &amp;#39;\1&amp;#39;) # Downcase each token
       end
end

tokenize(&amp;quot;How search &amp;amp; index works?&amp;quot;) #=&amp;gt; [&amp;quot;how&amp;quot;, &amp;quot;search&amp;quot;, &amp;quot;and&amp;quot;, &amp;quot;index&amp;quot;, &amp;quot;work&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中Stemming过程过于简陋，但相关算法其实已经非常成熟了，比如Porter、Hunspell等算法。其中Ruby实现有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://locknet.ro/archive/2009-10-29-ann-ruby-stemmer.html&lt;/li&gt;
&lt;li&gt;https://github.com/aurelian/ruby-stemmer&lt;/li&gt;
&lt;li&gt;https://github.com/romanbsd/fast-stemmer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Inverted Index (倒排索引)&lt;/h2&gt;

&lt;p&gt;倒排索引（英语：Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。&lt;/p&gt;

&lt;p&gt;以英文为例，下面是要被索引的文本：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;T_0=&amp;quot;it is what it is&amp;quot;
T_1=&amp;quot;what is it&amp;quot;
T_2=&amp;quot;it is a banana&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;正向索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;docs = {
  1 =&amp;gt; &amp;quot;it is what it is&amp;quot;,
  2 =&amp;gt; &amp;quot;what is it&amp;quot;,
  3 =&amp;gt; &amp;quot;it is a banana&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;倒排索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; &amp;quot;a&amp;quot;:      {2}
 &amp;quot;banana&amp;quot;: {2}
 &amp;quot;is&amp;quot;:     {0, 1, 2}
 &amp;quot;it&amp;quot;:     {0, 1, 2}
 &amp;quot;what&amp;quot;:   {0, 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检索的条件&amp;quot;what&amp;quot;, &amp;quot;is&amp;quot; 和 &amp;quot;it&amp;quot; 将对应这个集合：&lt;code&gt;{0,1}&lt;/code&gt; &amp;amp; &lt;code&gt;{0,1,2}&lt;/code&gt; &amp;amp; &lt;code&gt;{0,1,2}&lt;/code&gt; = &lt;code&gt;{0,1}&lt;/code&gt;。即：0号和1号文档包含 what is it这三个关键词。&lt;/p&gt;

&lt;p&gt;接着上面的Tokenize，用Ruby简单实现倒排索引过程， 其中对Query 分词和对文档分词使用的是同一方式（有时候两者会有微小差异）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;set&amp;#39;
require &amp;#39;pry&amp;#39;

docs = {
  1 =&amp;gt; &amp;quot;it is what it is&amp;quot;,
  2 =&amp;gt; &amp;quot;what is it&amp;quot;,
  3 =&amp;gt; &amp;quot;it is a banana&amp;quot;
}

def tokenize(text)
  text.gsub(/&amp;amp;/, &amp;quot;and&amp;quot;).
       gsub(/[^\w\s]+/, &amp;quot;&amp;quot;).
       gsub(/\b(a|an|is)\b/i, &amp;quot;&amp;quot;).
       split(/\s+/).map do |token|
         token.downcase.sub(/(.*?)s\Z/, &amp;#39;\1&amp;#39;)
       end
end

index = {}

docs.each do |id, doc|
  tokenize(doc).each do |word|
    if index.has_key?(word)
      index[word] &amp;lt;&amp;lt; id
    else
      index[word] = Set.new([id])
    end
  end
end

def search(text, index)
  tokenize(text).map{ |word| index[word] || Set.new }.reduce(:&amp;amp;)
end

index_store = init_index_store(Docs)   =&amp;gt; {&amp;quot;it&amp;quot;=&amp;gt;#&amp;lt;Set: {1, 2, 3}&amp;gt;, &amp;quot;what&amp;quot;=&amp;gt;#&amp;lt;Set: {1, 2}&amp;gt;, &amp;quot;banana&amp;quot;=&amp;gt;#&amp;lt;Set: {3}&amp;gt;}
search(&amp;quot;what is it?&amp;quot;, index_store)     =&amp;gt; #&amp;lt;Set: {1, 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，一个最简单是search engine就实现了，当然，我们还没涉及到排序，搜索过程使用的是最简单的 集合布尔模型。下面会涉及 &lt;code&gt;TF-IDF&lt;/code&gt; 相关度排序内容。&lt;/p&gt;

&lt;h2&gt;Sort By  Relevance (按相关度排序)&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/12/28/how-search-and-index-works.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/12/28/how-search-and-index-works.html</guid>
        
        
      </item>
    
      <item>
        <title>Trie 树的应用之敏感词过滤</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://gp1.wac.edgecastcdn.net/806614/photos/photos.500px.net/65000163/55dcc47e193e5540faaa5d97a70f06206f12cbbc/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Trie&lt;/h2&gt;

&lt;p&gt;trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/320px-Trie_example.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上面的介绍和例子来自维基百科，描述一个保存了8个键的trie结构，&amp;quot;A&amp;quot;, &amp;quot;to&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;ted&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;in&amp;quot;, and &amp;quot;inn&amp;quot;. 图示中标注出完整的单词，只是为了演示trie的原理。&lt;/p&gt;

&lt;h2&gt;敏感词过滤&lt;/h2&gt;

&lt;p&gt;敏感词过滤或关键词提取是Trie树的一个典型应用。拿待过滤词ABCDEF举例，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ABCDEF&lt;/li&gt;
&lt;li&gt;BCDEF&lt;/li&gt;
&lt;li&gt;CDEF&lt;/li&gt;
&lt;li&gt;DEF&lt;/li&gt;
&lt;li&gt;EF&lt;/li&gt;
&lt;li&gt;F&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依次用上面的子串在Trie里walk，看能否walk到叶子节点，如果能，说明包含关键词，并提取出来。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;triez&amp;#39;

words = %w[大叶榕 细叶榕 高山榕 木棉 洋紫荆 樟树 芒果 蝴蝶果 人面子]

trie = Triez.new

words.each { |word| trie[word] = 1 }

post_text = &amp;quot;行道树芒果引市民争相采摘。&amp;quot;

results = Hash.new(0)

(0..post_text.size - 1).each do |i|
  trie.walk(post_text[i..-1]).each do |word_in_trie, _|
    results[word_in_trie] = results[word_in_trie] + 1
  end
end

puts results #=&amp;gt; {&amp;quot;芒果&amp;quot; =&amp;gt; 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;去噪&lt;/h2&gt;

&lt;p&gt;用户可以通过在输入内容中加入空格、特殊符号来干扰敏感词过滤工作。比如芒果可以写成 &lt;code&gt;芒 果&lt;/code&gt;、&lt;code&gt;芒**果&lt;/code&gt;、&lt;code&gt;芒%果&lt;/code&gt;。
解决办法是在过滤之前去噪。还是上面的代码，加上去噪处理：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;triez&amp;#39;

words = %w[大叶榕 细叶榕 高山榕 木棉 洋紫荆 樟树 芒果 蝴蝶果 人面子]

trie = Triez.new

words.each { |word| trie[word] = 1 }

post_text = &amp;quot;行道树芒&amp;amp;&amp;amp;果引市民争相采摘。&amp;quot;

results = Hash.new(0)

post_text = post_text.gsub(/[\s&amp;amp;%$@*]+/, &amp;quot;&amp;quot;)

(0..post_text.size - 1).each do |i|
  trie.walk(post_text[i..-1]).each do |word_in_trie, _|
    results[word_in_trie] = results[word_in_trie] + 1
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/luikore/triez&lt;/li&gt;
&lt;li&gt;http://zh.wikipedia.org/wiki/Trie&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/23/trie-shu-de-ying-yong.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/23/trie-shu-de-ying-yong.html</guid>
        
        
      </item>
    
      <item>
        <title>Upload resources to AWS using asset sync </title>
        <description>&lt;h3&gt;目的&lt;/h3&gt;

&lt;p&gt;网站的规模逐渐变大，页面加载速度逐渐变慢，其中图片加载的时间是主要的问题。选择把js css 图片这些文件放到aws有一下几个原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;减少本服务器的负载.&lt;/li&gt;
&lt;li&gt;我们网站拥有多个域名，即使是同一个产品，在不同子站显示，图片都要重新加载一遍。一旦统一使用aws，不同子站都是请求同一图片地址，浏览器可以做缓存.&lt;/li&gt;
&lt;li&gt;避免重复繁琐的图片上传管理操作，直接通过代码管理.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;使用&lt;a href=&quot;https://github.com/rumblelabs/asset_sync&quot;&gt;asset sync&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用的时候进行简单的配置即可，其中遇到一个问题，插件在dev &amp;amp; staging都可以正确的运行，在production时遇到错误提示&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[2014-11-12T04:17:44.818010 #788] ERROR -- : uninitialized constant AssetSync (NameError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大致的原因：&lt;/p&gt;

&lt;p&gt;由于js css 与图片是能够正确上传到s3的，所以说明插件在 precomplice之后有正确的运行，但是启动unicorn的时候报错，可能是启动的时候不会加载 asset group 的插件, initializar 文件夹内的代码还会加载, 导致AssetSync gem 没有初始化，但是代码中却没有对这个进行判断。&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;if defined?(AssetSync)
...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用后发现的问题，暂时搁置&lt;/h3&gt;

&lt;p&gt;1、无法使用gzip。使用的s3服务器中没有cloudfront，导致无法识别HTTP HEAD中Content-Encoding:gzip的请求，导致使用只能请求到非gz后的 js 与 css 文件，网站整体的pagespeed反而下降了。&lt;/p&gt;

&lt;p&gt;2、工作流程导致无法运用。前端工程师不使用rails server进行代码的编写，例如图片的url需要写成asset&lt;em&gt;host:XXXX,导致使用asset&lt;/em&gt;host指向s3后，他们无法在本地进行开发工作。&lt;/p&gt;

&lt;p&gt;3、代码中历史遗留的问题。旧代码中保留了不少直接使用public的图片，而public的图片不能被上传到s3中，不能直接使用asset sync，需要进行大量的修改。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/14/upload-resources-to-aws-using-asset-sync.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/14/upload-resources-to-aws-using-asset-sync.html</guid>
        
        
      </item>
    
      <item>
        <title>You do not know NewRelic</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/0443c9ac79a6492aad4810c472308b97.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Enabling garbage collection instrumentation&lt;/h2&gt;

&lt;p&gt;默认情况，Newrelic的Transactions response time overview 页面是没有统计GC信息的。如果想要开启只需要在&lt;code&gt;config/initializers/new_relic_unicorn.rb&lt;/code&gt;添加如下代码(如果不是unicorn只需要最后一句)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# -*- encoding : utf-8 -*-
# Ensure the agent is started using Unicorn.
# This is needed when using Unicorn and preload_app is not set to true.
# See https://docs.newrelic.com/docs/ruby/no-data-with-unicorn
if defined? Unicorn
  ::NewRelic::Agent.manual_start()
  ::NewRelic::Agent.after_fork(:force_reconnect =&amp;gt; true)
end

GC::Profiler.enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Recording deployments&lt;/h2&gt;

&lt;p&gt;New Relic 支持自定义Event，结合 Capistrano 可以把每次发布的时间点划到图表上，题图上到三条粉丝细线就是deployment时刻。
同时，还可以把changelog信息一并记录下来，便于追踪各个版本差异产生的原因，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/7ffc389aed2e1443bbcd5ddf2f74d32c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;实现这样酷的功能只需要两行代码，在&lt;code&gt;deploy.rb&lt;/code&gt;里：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;new_relic/recipes&amp;#39;

after &amp;quot;deploy:updated&amp;quot;, &amp;quot;newrelic:notice_deployment&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你不需要发布就可以测试这个功能是否设置正确：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;cap newrelic:notice_deployment -Snewrelic_desc=&amp;quot;Deploying beta Krakatau release&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Availability monitoring&lt;/h2&gt;

&lt;p&gt;默认情况下，Newrelic会在网站响应速度低到一定阀值邮件通知，也可以手动设置 &lt;code&gt;Availability monitoring&lt;/code&gt;，
需要提供某个页面到URL，如果这个URL一分钟内ping不通就会收到网站 downtime 邮件。&lt;/p&gt;

&lt;h2&gt;Instrumentation Redis&lt;/h2&gt;

&lt;p&gt;只需Gemfile里添加 &lt;code&gt;newrelic-redis&lt;/code&gt; 这个gem，前提是你用了 &lt;code&gt;redis-rb&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一定有同学会问，Redis都那么快了还需要监控？&lt;/p&gt;

&lt;p&gt;原因很简单：&lt;/p&gt;

&lt;p&gt;默认情况下Newrelic会把请求时间算在Ruby／View里，这样你发现一个很慢的页面渲染，你无法定位到具体是什么东西那么慢。
加上 &lt;code&gt;newrelic-redis&lt;/code&gt;之后这部分时间被清晰到记录在Database catalog，并且可以和view其他部分区分开, 细致到每个redis指令执行到时间：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/9532c2a296f8e30b1107f6d93eb1e2fe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Instrumentation Rack Middleware&lt;/h2&gt;

&lt;p&gt;只需要升级 &lt;code&gt;newrelic_rpm&lt;/code&gt; 到 3.9.0 或以上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/22bdbf838583e4d6578ccf01c458aad0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/f9e38c001dd51e040f68223e41ff399c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;JS Error Notification&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/a171111fbe6cf8d6275c5f2d83ca8db9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;就是ExceptionNotify的JS云端版本。当然，这个功能已经有很多人在做了，并不是newrelic首创。但集成到newrelic里却是非常自然，监控异常的同时还可以监控JS错误，何乐而不为呢..&lt;/p&gt;

&lt;h2&gt;NewRelic Insights&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/74dab3fcea4ddc6d836c4b04c238ab86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这是一个beta项目，NewRelic把自己收集的数据再开放给你。通过自定义的NRQL，让你可以按照自己关心的方式自定义Dashboard。有了API，你可以再把这些数据倒回自己倒应用，和自己已有的数据做进一步分析。&lt;/p&gt;

&lt;h2&gt;Custom Variable&lt;/h2&gt;

&lt;p&gt;Google Analytics 很早就有了，有了这个东西可玩性就提高了一个层次。能做什么就由开发者自己来想像了。&lt;/p&gt;

&lt;h2&gt;NewRelic 和 Twitter的吞吐量相当，数据库使用的是 MySQL（Percona）&lt;/h2&gt;

&lt;p&gt;Renferer: http://www.slideshare.net/newrelic/how-to-build-a-saas-app-with-twitterlike-throughput-on-just-9-servers&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;相关文档
* https://docs.newrelic.com/docs/ruby/garbage-collection
* https://docs.newrelic.com/docs/ruby/recording-deployments-with-the-ruby-agent
* http://blog.newrelic.com/2014/07/02/ruby-agent-now-automatically-instruments-rack-middlewares&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/you-do-not-know-newrelic.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/you-do-not-know-newrelic.html</guid>
        
        
      </item>
    
      <item>
        <title>Chorisia tree</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://gp1.wac.edgecastcdn.net/806614/photos/photos.500px.net/34845288/a093afe9d576137dfdf9537724f27f043685a1a0/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/tree/2014/11/08/the-title-of-the-new-post.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/tree/2014/11/08/the-title-of-the-new-post.html</guid>
        
        
        <category>tree</category>
        
      </item>
    
      <item>
        <title>Fastest Way To Load Data In MySQL</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.runrares.ro/_imgArticol/viteza.jpg&quot; alt=&quot;fast&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/&quot;&gt;Mass inserting data in Rails without killing your performance&lt;/a&gt; 这篇文章里提到Rails快速批量插入数据的几种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use transactions&lt;/li&gt;
&lt;li&gt;Get down and dirty with the raw SQL&lt;/li&gt;
&lt;li&gt;A single mass insert&lt;/li&gt;
&lt;li&gt;Use INSERT statements with multiple VALUES lists with &lt;a href=&quot;https://github.com/zdennis/ar-extensions&quot;&gt;ar-extensions&lt;/a&gt; OR &lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第四种方式是AR方式的70倍左右，已经很快了，还有更快的吗？&lt;/p&gt;

&lt;p&gt;From MySQL Doc:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When loading a table from a text file, use LOAD DATA INFILE. This is usually 20 times faster than using INSERT statements&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SQL语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(15955.1ms)  LOAD DATA LOCAL INFILE &amp;#39;/Users/hooopo/data/out/product_sales_facts.txt&amp;#39;
REPLACE INTO TABLE product_sale_facts FIELDS TERMINATED BY &amp;#39;,&amp;#39; (`id`,`date_id`,`order_id`,`product_id`,`address_id`,`unit_price`,`purchase_price`,`gross_profit`,`quantity`,`channel_id`,`gift`)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入行数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wc -l &amp;lt; /Users/hooopo/data/out/product_sales_facts.txt
 1271413
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大概130w数据用时16秒，平均每秒插入8w条记录左右。如果想用Gem，可以试试 adapter&lt;em&gt;extensions 和 load&lt;/em&gt;data_infile：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/activewarehouse/adapter_extensions&lt;/li&gt;
&lt;li&gt;https://github.com/EmmanuelOga/load&lt;em&gt;data&lt;/em&gt;infile&lt;/li&gt;
&lt;li&gt;https://github.com/jsuchal/activerecord-fast-import&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL Doc里关于LOAD INFILE的详细介绍：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://dev.mysql.com/doc/refman/5.5/en/load-data.html&lt;/li&gt;
&lt;li&gt;http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-load-data-in-mysql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-load-data-in-mysql.html</guid>
        
        
      </item>
    
      <item>
        <title>Fastest Way To Change Schema In MySQL</title>
        <description>&lt;p&gt;在默认情况，Rails的migration会为每个语句单独生成一条SQL来修改表结构。这对新建的表来说是无所谓的，一个create table 或 alter table都是瞬间完成。但是，对于已经存在大量数据的表来说，这样效率极低。刚开始没有注意这样的问题，order表的写法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;rename_column :orders, &amp;quot;shipping_first_name&amp;quot;, &amp;quot;origin_shipping_first_name&amp;quot;
rename_column :orders, &amp;quot;shipping_last_name&amp;quot;, &amp;quot;origin_shipping_last_name&amp;quot;
remove_column :orders, &amp;quot;coupon_value&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果就是，每一个rename&lt;em&gt;column和remove&lt;/em&gt;column执行时间大约4分钟，一共20多个这样的语句，migrate总计执行了近两个小时。因为alter table时mysql需要把整个order表copy to tmp table，而order表是非常庞大的。&lt;/p&gt;

&lt;p&gt;解决办法是把上面的所有修改order的migration合并成一个，并且设置bulk 选项。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class RenameOldOrderAddressRelatedColumn &amp;lt; ActiveRecord::Migration
  def up
    change_table(:orders, :bulk =&amp;gt; true) do |t|
      t.remove :coupon_code
      t.remove :coupon_value
      t.remove :order_promotion_id
      t.rename :order_status_code_id, :state
      t.remove :in_process
      [:first_name,
       :last_name,
       :phone,
       :street_address,
       :city,
       :zip,
       :company,
       :street_address_2,
       :country,
       :state].each do |column|
        t.rename &amp;quot;shipping_#{column}&amp;quot;, &amp;quot;origin_shipping_#{column}&amp;quot;
        t.rename &amp;quot;billing_#{column}&amp;quot;, &amp;quot;origin_billing_#{column}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，上面的migration只生成一条SQL语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ALTER TABLE `orders` DROP `coupon_code`, DROP `coupon_value`, DROP `order_promotion_id`, CHANGE `shipping_first_name` `origin_shipping_first_name` varchar(50) DEFAULT NULL, CHANGE `billing_first_name` `origin_billing_first_name` varchar(50) DEFAULT NULL, CHANGE `shipping_last_name` `origin_shipping_last_name` varchar(50) DEFAULT NULL, CHANGE `billing_last_name` `origin_billing_last_name` varchar(50) DEFAULT NULL, CHANGE `shipping_phone` `origin_shipping_phone` varchar(20) DEFAULT NULL, CHANGE `billing_phone` `origin_billing_phone` varchar(20) DEFAULT NULL, CHANGE `shipping_street_address` `origin_shipping_street_address` varchar(255) DEFAULT NULL, CHANGE `billing_street_address` `origin_billing_street_address` varchar(255) DEFAULT NULL, CHANGE `shipping_city` `origin_shipping_city` varchar(255) DEFAULT NULL, CHANGE `billing_city` `origin_billing_city` varchar(255) DEFAULT NULL, CHANGE `shipping_zip` `origin_shipping_zip` varchar(20) DEFAULT NULL, CHANGE `billing_zip` `origin_billing_zip` varchar(20) DEFAULT NULL, CHANGE `shipping_company` `origin_shipping_company` varchar(255) DEFAULT NULL, CHANGE `billing_company` `origin_billing_company` varchar(255) DEFAULT NULL, CHANGE `shipping_street_address_2` `origin_shipping_street_address_2` varchar(255) DEFAULT NULL, CHANGE `billing_street_address_2` `origin_billing_street_address_2` varchar(255) DEFAULT NULL, CHANGE `shipping_country` `origin_shipping_country` varchar(255) DEFAULT NULL, CHANGE `billing_country` `origin_billing_country` varchar(255) DEFAULT NULL, CHANGE `shipping_state` `origin_shipping_state` varchar(255) DEFAULT NULL, CHANGE `billing_state` `origin_billing_state` varchar(255) DEFAULT NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面修改，整个migration执行时间降到了十分钟以内。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-change-schema-in-mysql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-change-schema-in-mysql.html</guid>
        
        
      </item>
    
      <item>
        <title>Advanced Bitmask Attributes for SQL</title>
        <description>&lt;h1&gt;Advanced Bitmask Attributes for SQL&lt;/h1&gt;

&lt;h2&gt;Use Case&lt;/h2&gt;

&lt;p&gt;假设你正在为一个电商网站开发这样一种功能，商品可以在后台分配到不同的频道里显示（当然，一个商品可以在多个频道显示）。
另外有一个前提是，频道数目不多（10个以内）。&lt;/p&gt;

&lt;h2&gt;Bitmask&lt;/h2&gt;

&lt;p&gt;最常规的做法是加两张表，一个频道表，另一个是频道和商品中间表，标记频道和商品对应关系。这种做法的缺点是查询的时候需要JOIN两张表。再加上对商品本身的属性进行过滤和排序，查询会非常慢。&lt;/p&gt;

&lt;p&gt;一个简化的办法就是使用Bitmask Attributes。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class Product &amp;lt; AR
  Channel1 = 1 &amp;lt;&amp;lt; 0 # 1
  Channel2 = 1 &amp;lt;&amp;lt; 1 # 2
  Channel3 = 1 &amp;lt;&amp;lt; 2 # 4
  Channel4 = 1 &amp;lt;&amp;lt; 3 # 8
end

# == Schema Information
#
# Table name: products
#
#  id                        :integer          not null, primary key
#  channels                  :integer
#  retail_price              :decimal(8, 2)    default(0.0), not null
#  purchase_price            :decimal(8, 2)    default(0.0), not null
#  image                     :string(255)
#  weight                    :integer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;存储&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果一个商品能在Channel1和Channel2里显示： channels =&amp;gt; 1 + 2 = 3&lt;/li&gt;
&lt;li&gt;如果一个商品能在Channel2和Channel2和Channel3显示： channels =&amp;gt; 1 + 2 + 4 = 7&lt;/li&gt;
&lt;li&gt;以此类推&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;查询&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;查询能在Channel1显示的商品: &lt;code&gt;Product.where(&amp;quot;channels &amp;amp; 1 = 1&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询能在Channel1和Channel2显示的商品：&lt;code&gt;Product.where(&amp;quot;channels &amp;amp; 3 = 3&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询不能在Channel3显示的商品：&lt;code&gt;Product.where(&amp;quot;channels &amp;amp; 4 = 0&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;优缺点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;优点：更少的字段、更少的表解决了问题&lt;/li&gt;
&lt;li&gt;缺点：所有需要过滤channels字段的查询都为全表扫描，无法利用索引&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Advanced Bitmask Attributes&lt;/h3&gt;

&lt;p&gt;继续使用Bitmask的思路，但是把查询转化成IN查询，有效利用索引。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;查询能在Channel1显示的商品:
&lt;code&gt;ruby
Product.where(:channels =&amp;gt; (1...(1 &amp;lt;&amp;lt; 4)).select{|x| x &amp;amp; 1 == 1})
# 产生SQL
SELECT `products`.* FROM `products`  WHERE `products`.`channels` IN (1, 3, 5, 7, 9, 11, 13, 15)&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询能在Channel1和Channel2显示的商品：
&lt;code&gt;ruby
Product.where(:channels =&amp;gt; (1...(1 &amp;lt;&amp;lt; 4)).select{|x| x &amp;amp; 3 == 3})
# 产生SQL
SELECT `products`.* FROM `products`  WHERE `products`.`channels` IN (3, 7, 11, 15)
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询不能在Channel3显示的商品：
&lt;code&gt;ruby
Product.where(:channels =&amp;gt; (1...(1 &amp;lt;&amp;lt; 4)).select{|x| x &amp;amp; 4 == 0})
# 产生SQL
SELECT `products`.* FROM `products`  WHERE `products`.`channels` IN (1, 2, 3, 8, 9, 10, 11)
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;结论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;中间表方案：需要额外的JOIN Table&lt;/li&gt;
&lt;li&gt;Bitmask Attributes：需要Full Table Scan&lt;/li&gt;
&lt;li&gt;Advanced Bitmask Attributes：No JOIN,No Full Table Scan.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/advanced-bitmask-attributes-for-sql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/advanced-bitmask-attributes-for-sql.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi(&amp;#39;Tom&amp;#39;)
#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Nov 2014 02:08:09 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/jekyll/update/2014/11/06/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/jekyll/update/2014/11/06/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
