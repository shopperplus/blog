<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shopper+ Team Blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://shopperplus.github.io/blog/</link>
    <atom:link href="http://shopperplus.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 24 Jan 2015 16:01:32 +0800</pubDate>
    <lastBuildDate>Sat, 24 Jan 2015 16:01:32 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>容错和速错</title>
        <description>&lt;p&gt;程序出现异常，不想让用户看到，会给一个友好的提示，这种做法一般称作“容错”。另一方面，我们希望自己的程序能够把隐藏错误尽早暴露出来，及时修复，这种思路称之为“速错”。拼写错误、源数据错误、逻辑错误都需要速错。当然，容错和速错也并不总是对立的，分清何时应用哪种策略非常重要。&lt;/p&gt;

&lt;h2&gt;Hash#fetch over Hash#[]&lt;/h2&gt;

&lt;p&gt;当&lt;code&gt;Hash&lt;/code&gt;的key值是已知的情况，比如状态枚举。优先使用&lt;code&gt;fetch&lt;/code&gt;可以避免拼写错误带来的意外。举例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class Event &amp;lt; AR
  STATUS = {
    :open =&amp;gt; 1,
    :closed =&amp;gt; 0
  }
end
Event.update_all(:status =&amp;gt; Event::STATUS[:close], &amp;quot;created_at &amp;gt; &amp;#39;2011-1-1&amp;#39;&amp;quot;) # =&amp;gt; update status to null
Event.update_all(:status =&amp;gt; Event::STATUS.fetch(:close), &amp;quot;created_at &amp;gt; &amp;#39;2011-1-1&amp;#39;&amp;quot;) # =&amp;gt; raise KeyError: key not found: :close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面例子由于错误拼写，把&lt;code&gt;closed&lt;/code&gt;拼成 &lt;code&gt;close&lt;/code&gt;，造成了一个&lt;code&gt;Silent failure&lt;/code&gt;，而才有&lt;code&gt;fetch&lt;/code&gt;方法就会在拼错时直接抛出异常，避免了之后的错误。&lt;/p&gt;

&lt;h2&gt;使用常量&lt;/h2&gt;

&lt;p&gt;除此之外，声明常量也可以带来同样效果，本质是给输入加上了拼写检查。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class Event &amp;lt; AR
  CLOSED = 0
  OPEN = 1
end
Event.update_all(:status =&amp;gt; Event::CLOSE, &amp;quot;created_at &amp;gt; &amp;#39;2011-1-1&amp;#39;&amp;quot;)       # =&amp;gt; raise NameError: uninitialized constant CLOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;善用attr method&lt;/h2&gt;

&lt;p&gt;经常看到有人问，attr method有什么用，直接使用实例变量不好么，这样的问题。&lt;/p&gt;

&lt;p&gt;如果不是对&lt;code&gt;getter&lt;/code&gt;和 &lt;code&gt;setter&lt;/code&gt; 有额外的封装，两者是一样的，但用attr method调用和上面两个例子一样，也起到了错误检查的作用。我们知道Ruby的实例变量有一个隐藏特性，实例变量不需要定义就可以使用，不会报错。当然，在启动Ruby加 &lt;code&gt;-w&lt;/code&gt; 参数是可以warning提示的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Event
  def initialze(attrs)
    @closed = attrs[:closed] || true
  end

  def xxx
    if @close
      # some code will not run
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们使用attr reader，调用close方法直接就会抛出undefind method异常，让拼写错误尽早现形。&lt;/p&gt;

&lt;h2&gt;save! over save&lt;/h2&gt;

&lt;p&gt;经常看到一段事物代码里用&lt;code&gt;save&lt;/code&gt;的情况，&lt;code&gt;save&lt;/code&gt;不会抛异常，这样事物的意义就失去了。显然，这属于不理解事物运作机制的错误用法。在没有事物的代码里，如何选择&lt;code&gt;save&lt;/code&gt;还是&lt;code&gt;save!&lt;/code&gt;也是非常困难的。我个人的习惯是，在不需要错误回显的情况，一律使用&lt;code&gt;save!&lt;/code&gt;和&lt;code&gt;update_attributes!&lt;/code&gt;这样能够&lt;code&gt;Fail Fast&lt;/code&gt; 的方法。&lt;/p&gt;

&lt;h2&gt;不要滥用 rescue&lt;/h2&gt;

&lt;p&gt;如果你的代码里经常见到&lt;code&gt;begin rescue&lt;/code&gt;,这就是一种&lt;code&gt;bad small&lt;/code&gt;。当然，调用外部接口时，异常一定要捕获，但有一部分新手会在自己写的一堆应用逻辑外面套上&lt;code&gt;begin resuce&lt;/code&gt;,并且不明确捕获的错误类型。当你问他，你要捕获哪种错误的时候，他一定回答不出。对于自己代码里的逻辑错误不应该去捕获错误，而是查出错误的来源，从源头上解决问题。即使要捕获，也应该有一个明确的类型：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;begin
rescue KeyError =&amp;gt; e
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用异常做控制流的做法也不少见，但不是本文讨论的话题..&lt;/p&gt;

&lt;h2&gt;数据源错误&lt;/h2&gt;

&lt;p&gt;容错的思想带来的一个问题是总想隐藏问题，不是直接去从源头解决。当一个产品数据被误删导致用户订单页面出错，不应该去容错，到处写&lt;code&gt;order_item.product.try(:name)&lt;/code&gt;，而是应该去恢复被删数据。&lt;/p&gt;

&lt;p&gt;同理，数据库出现脏数据，不应该去改变代码的写法，比如，把&lt;code&gt;save&lt;/code&gt;改成&lt;code&gt;save(false)&lt;/code&gt;，去跳过验证。应该做的也是清理数据源，否则就需要无穷无尽的“容错”代码。&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2015/01/24/rong-cuo-he-su-cuo.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2015/01/24/rong-cuo-he-su-cuo.html</guid>
        
        
      </item>
    
      <item>
        <title>CRC32 Usage In MySQL</title>
        <description>&lt;p&gt;CRC全称为Cyclic Redundancy Check，又叫循环冗余校验。CRC32是CRC算法的一种，常用于校验网络上传输的文件。&lt;/p&gt;

&lt;h2&gt;How to Use CRC32 In MySQL &amp;amp; Ruby&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mysql&amp;gt; SELECT CRC32(&amp;#39;hello&amp;#39;);
+----------------+
| CRC32(&amp;#39;hello&amp;#39;) |
+----------------+
|      907060870 |
+----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;zlib&amp;#39;
Zlib::crc32(&amp;#39;hello&amp;#39;) # =&amp;gt; 907060870
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CRC32 Vs MD5&lt;/h2&gt;

&lt;p&gt;这里我们不谈校验，只说MySQL里如何利用CRC32来加快查询。首先我们得知道CRC32的基本特征：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CRC32函数返回值的范围是0-4294967296（2的32次方减1)&lt;/li&gt;
&lt;li&gt;相比MD5，CRC32函数很容易碰撞&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;CRC32的使用场景&lt;/h2&gt;

&lt;p&gt;由上述两个基本特性可知，CRC32在MySQL里只需要用bigint存储，而MD5需要varchar来存储。但是CRC32很容易碰撞，这适合做索引么？&lt;/p&gt;

&lt;p&gt;场景：我们在做一个爬虫，对于一个URL，先去数据库里查询是否存在，如果不存在，插入到数据库中。大家都知道这种类型应用表会增长非常迅速，如果简单的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT * FROM urls WHERE url = &amp;#39;http://wwww.shopperplus.com&amp;#39;;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会每次全表扫描，效率非常低。如果在url列上面加索引会快一些，但由于url是varchar类型，字段本身的存储空间和索引占用的存储空间都比较大。&lt;/p&gt;

&lt;p&gt;如果加一个crc32_url列，并且只在这个列上加索引，索引空间就会小很多。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT * FROM urls WHERE crc_url = 907060870;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这种做法一定不可以，因为前面已经提到crc32函数会产生碰撞，也就是说值为907060870的不止有&lt;code&gt;hello&lt;/code&gt;。一个小技巧是只使用crc32列来过滤：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SELECT * FROM urls WHERE crc_url = 907060870 AND url = &amp;#39;hello&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来看一下有碰撞时，索引利用情况：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;explain SELECT * FROM urls WHERE crc32_url = 907060870 AND url = &amp;#39;hello&amp;#39;\G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: urls
         type: ref
          key: index_urls_on_crc32_url
      key_len: 4
          ref: const
         rows: 2
        Extra: Using where
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样一来，大部分查询还是只需要扫描一行就获得结果。对于少部分碰撞的记录，只需要多扫描几行也可以正确获得结果。&lt;/p&gt;

&lt;p&gt;url的场景从varchar到bigint的优化其实效果不是特别明显。另一个例子是文本，假如我们有一个text类型的字段（文章内容、评论、微博之类），每次插入之前要判断一下这个内容是否在数据库里存在了。如果使用crc32的技巧，改善的空间还是蛮大的。&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2015/01/10/crc32-hash-usage-in-mysql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2015/01/10/crc32-hash-usage-in-mysql.html</guid>
        
        
      </item>
    
      <item>
        <title>ActiveRecord Object Instantiate and Clone</title>
        <description>&lt;h2&gt;initialize&lt;/h2&gt;

&lt;p&gt;最常用的就是使用&lt;code&gt;new&lt;/code&gt;方法初始化一个&lt;code&gt;AR&lt;/code&gt;对象，比如 &lt;code&gt;User.new(:name =&amp;gt; &amp;quot;user name&amp;quot;)&lt;/code&gt;. &lt;code&gt;new&lt;/code&gt; 方法通过 &lt;code&gt;initialize&lt;/code&gt; 方法构造出一个新对象。大家几乎天天在用这个方法，不多说了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L276-L297

def initialize(attributes = nil, options = {})
  @attributes = self.class._default_attributes.dup

  init_internals
  initialize_internals_callback

  self.class.define_attribute_methods
  # +options+ argument is only needed to make protected_attributes gem easier to hook.
  # Remove it when we drop support to this gem.
  init_attributes(attributes, options) if attributes

  yield self if block_given?
  _run_initialize_callbacks
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;allocate + init_with&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt; 方法构造出来的对象在你未save之前都是 &lt;code&gt;new_record&lt;/code&gt;，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;user.new_record? #=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一些场景，我们已经有了对象&lt;code&gt;id&lt;/code&gt;和Raw Attributes，我们想要初始化一个AR对象。最经典的场景就是从缓存读出Raw Attributes之后。这时，使用 &lt;code&gt;new&lt;/code&gt; 方法就不合适。还好，Rails 给我们提供了一个后门：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L309-L322
user = User.allocate
user.init_with(&amp;quot;attributes&amp;quot; =&amp;gt; attributes, &amp;quot;new_record&amp;quot; =&amp;gt; false)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们知道，一个对象由类定义和属性组成，已知类定义之后，我们只要把属性填充给实例对象就完成了初始化过程。其实，这也绕过了使用&lt;code&gt;new&lt;/code&gt;方法来构造对象所需的内部复杂工序。&lt;/p&gt;

&lt;h2&gt;instancate&lt;/h2&gt;

&lt;p&gt;除此之外，如果你的attributes数据是从&lt;code&gt;DB&lt;/code&gt;获取来的，你可以使用更高级的&lt;code&gt;instancate&lt;/code&gt;方法，它对来源数据进行一次类型转换，然后再调用上述的 &lt;code&gt;allocate&lt;/code&gt; + &lt;code&gt;init_with&lt;/code&gt;。&lt;code&gt;find_by_sql&lt;/code&gt; 和&lt;code&gt;STI&lt;/code&gt;就是直接依赖 &lt;code&gt;instancate&lt;/code&gt; 来初始化AR 对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/298ec6de55e3adb7d012ba6a9db8b4dd5fd95779/activerecord/lib/active_record/persistence.rb#L56-L70

def instantiate(attributes, column_types = {})
  klass = discriminate_class_for_record(attributes)
  attributes = klass.attributes_builder.build_from_database(attributes, column_types)
  klass.allocate.init_with(&amp;#39;attributes&amp;#39; =&amp;gt; attributes, &amp;#39;new_record&amp;#39; =&amp;gt; false)
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;initialize_dup&lt;/h2&gt;

&lt;p&gt;如果我们已经有了一个存在的AR记录，想再初始化一个的话，使用&lt;code&gt;clone&lt;/code&gt;或&lt;code&gt;dup&lt;/code&gt;也是可行的。关于&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;区别，我觉得下面这段代码描述是最清晰的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class Object
  def clone
    clone = self.class.allocate

    clone.copy_instance_variables(self)
    clone.copy_singleton_class(self)

    clone.initialize_clone(self)
    clone.freeze if frozen?

    clone
  end

  def dup
    dup = self.class.allocate
    dup.copy_instance_variables(self)
    dup.initialize_dup(self)
    dup
  end

  def initialize_clone(other)
    initialize_copy(other)
  end

  def initialize_dup(other)
    initialize_copy(other)
  end

  def initialize_copy(other)
    # some internal stuff (don&amp;#39;t worry)
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;的区别这里不是重点，想说一下 &lt;code&gt;initialize_dup&lt;/code&gt; 钩子。 &lt;code&gt;initialize_dup&lt;/code&gt; 是AR内置的，我们在调用 &lt;code&gt;user.dup&lt;/code&gt; 时，底层调用的其实是它。注意，&lt;code&gt;user.dup&lt;/code&gt; 放回对象把id重置为空了，就是说这是一个 shallow copy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# https://github.com/rails/rails/blob/f916aa247bddba0c58c50822886bc29e8556df76/activerecord/lib/active_record/core.rb#L325-L364

def initialize_dup(other) # :nodoc:
  @attributes = @attributes.dup
  @attributes.reset(self.class.primary_key)

  _run_initialize_callbacks

  @aggregation_cache = {}
  @association_cache = {}

  @new_record  = true
  @destroyed   = false

  super
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Question&lt;/h2&gt;

&lt;p&gt;那么问题来了:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为什么AR要自己实现一个 &lt;code&gt;initialize_dup&lt;/code&gt;，直接dup不行么？&lt;/li&gt;
&lt;li&gt;我们在缓存的时候是直接把 AR 对象塞进去（即：&lt;code&gt;Rails.cache.write user.id, user&lt;/code&gt;），还是自己序列化反序列化？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://thekaiway.com/2013/07/26/assemble-ar-object/&lt;/li&gt;
&lt;li&gt;http://thekaiway.com/2013/09/08/read-write-activerecord-attribute/&lt;/li&gt;
&lt;li&gt;http://www.jonathanleighton.com/articles/2011/initialize&lt;em&gt;clone-initialize&lt;/em&gt;dup-and-initialize_copy-in-ruby/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2015/01/01/activerecord-object-instantiate-and-clone.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2015/01/01/activerecord-object-instantiate-and-clone.html</guid>
        
        
      </item>
    
      <item>
        <title>How search and index works?</title>
        <description>&lt;p&gt;这篇文章主要目的是简单介绍搜索引擎的检索过程，并通过简单的Ruby代码实现。当然，由于本人能力有限，对搜索也是一知半解，注定话题不会太深，也不会太广...这不是 Solr 配置详解这种过于务实的话题，也不是某个搜索排序算法的深入研究的高深话题。&lt;/p&gt;

&lt;h2&gt;Tokenize (分词)&lt;/h2&gt;

&lt;p&gt;Tokenize 的过程是把Query或待索引的文本拆成最小的单元，也就是分词。包括以下过程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preprocess text

&lt;ul&gt;
&lt;li&gt;Synonym substitution&lt;/li&gt;
&lt;li&gt;Remove illegal expressions&lt;/li&gt;
&lt;li&gt;Remove stopwords.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Splitting and preparations for tokenizing

&lt;ul&gt;
&lt;li&gt;Split the text into words.&lt;/li&gt;
&lt;li&gt;Truncate the amount of tokens.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating tokens / strings

&lt;ul&gt;
&lt;li&gt;Downcase each token.&lt;/li&gt;
&lt;li&gt;Stemming each token.
*&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Synonym Rings&lt;/strong&gt; (同义词环)
同义词环（如图），把一组定义为等价关系的词汇连接起来，以提供搜索之用。事实上，这些词通常不是真正的同义词。例如，你在检查搜索日志，并和用户对话之后，你将发现不同的人在寻找同样的东西时，会输入不同的术语。某人要找 food processor（食物搅拌机），可能输入 &lt;code&gt;blender&lt;/code&gt; (搅拌机)，或下图中任何一个术语（或者常见的错误拼法）。不同类型网站，有着各自领域的同义词。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fd218a73442258bb08528d3f02e7e47c0e57c110/687474703a2f2f7365616e636f6e6e6f6c6c792e63612f7765622f303539363532373334392f696d616765732f696e666f335f303930322e6a7067&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stopwords&lt;/strong&gt; （停词）正如字面意思，停词。有些高频词，例如“a”，对用户查询的意义不大，同时在索引中又占据比较多的资源，最重要的是这些词还会影响匹配文档的相关度，所以，干脆在分词的时候就把它去掉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automatic Stemming&lt;/strong&gt; (自动词干)功能，是搜索引擎的一个实用功能，把一个术语扩展，包含其他共享相同词干的术语。如果词干搜索机制很强，可能会把 &lt;code&gt;computer&lt;/code&gt; 这个搜索术语视为和 &lt;code&gt;computers&lt;/code&gt;、&lt;code&gt;computation&lt;/code&gt;、&lt;code&gt;computing&lt;/code&gt; 甚至 &lt;code&gt;comput&lt;/code&gt; 这些术语共享相同的词干 &lt;code&gt;comput&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4e33f7f06e36361d59382ba60eb926564396b81d/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f617765736f6d655f73637265656e73686f742f363839303733343f4157534163636573734b657949643d305237464d57374158525643594d41505450523226457870697265733d31343139373632303333265369676e61747572653d7547716759664e66736a636f6d396e4e69465766787174394c3130253344&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;其他过程很容易理解了，整个Tokenize用Ruby代码的简单表示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def tokenize(text)
  text.gsub(/&amp;amp;/, &amp;quot;and&amp;quot;).                      # Synonym substitution
       gsub(/[^\w\s]+/, &amp;quot;&amp;quot;).                  # Remove illegal expressions
       gsub(/\b(a|an|is)\b/i, &amp;quot;&amp;quot;).            # Remove stopwords
       split(/\s+/).map do |token|            # Split the text into words
         token.downcase.sub(/(.*?)s\Z/, &amp;#39;\1&amp;#39;) # Downcase each token
       end
end

tokenize(&amp;quot;How search &amp;amp; index works?&amp;quot;) #=&amp;gt; [&amp;quot;how&amp;quot;, &amp;quot;search&amp;quot;, &amp;quot;and&amp;quot;, &amp;quot;index&amp;quot;, &amp;quot;work&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中Stemming过程过于简陋，但相关算法其实已经非常成熟了，比如Porter、Hunspell等算法。其中Ruby实现有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://locknet.ro/archive/2009-10-29-ann-ruby-stemmer.html&lt;/li&gt;
&lt;li&gt;https://github.com/aurelian/ruby-stemmer&lt;/li&gt;
&lt;li&gt;https://github.com/romanbsd/fast-stemmer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Inverted Index (倒排索引)&lt;/h2&gt;

&lt;p&gt;倒排索引（英语：Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。&lt;/p&gt;

&lt;p&gt;以英文为例，下面是要被索引的文本：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;T_0=&amp;quot;it is what it is&amp;quot;
T_1=&amp;quot;what is it&amp;quot;
T_2=&amp;quot;it is a banana&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;正向索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;docs = {
  1 =&amp;gt; &amp;quot;it is what it is&amp;quot;,
  2 =&amp;gt; &amp;quot;what is it&amp;quot;,
  3 =&amp;gt; &amp;quot;it is a banana&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;倒排索引&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; &amp;quot;a&amp;quot;:      {2}
 &amp;quot;banana&amp;quot;: {2}
 &amp;quot;is&amp;quot;:     {0, 1, 2}
 &amp;quot;it&amp;quot;:     {0, 1, 2}
 &amp;quot;what&amp;quot;:   {0, 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检索的条件&amp;quot;what&amp;quot;, &amp;quot;is&amp;quot; 和 &amp;quot;it&amp;quot; 将对应这个集合：&lt;code&gt;{0,1}&lt;/code&gt; &amp;amp; &lt;code&gt;{0,1,2}&lt;/code&gt; &amp;amp; &lt;code&gt;{0,1,2}&lt;/code&gt; = &lt;code&gt;{0,1}&lt;/code&gt;。即：0号和1号文档包含 what is it这三个关键词。&lt;/p&gt;

&lt;p&gt;接着上面的Tokenize，用Ruby简单实现倒排索引过程， 其中对Query 分词和对文档分词使用的是同一方式（有时候两者会有微小差异）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;set&amp;#39;
require &amp;#39;pry&amp;#39;

docs = {
  1 =&amp;gt; &amp;quot;it is what it is&amp;quot;,
  2 =&amp;gt; &amp;quot;what is it&amp;quot;,
  3 =&amp;gt; &amp;quot;it is a banana&amp;quot;
}

def tokenize(text)
  text.gsub(/&amp;amp;/, &amp;quot;and&amp;quot;).
       gsub(/[^\w\s]+/, &amp;quot;&amp;quot;).
       gsub(/\b(a|an|is)\b/i, &amp;quot;&amp;quot;).
       split(/\s+/).map do |token|
         token.downcase.sub(/(.*?)s\Z/, &amp;#39;\1&amp;#39;)
       end
end

index = {}

docs.each do |id, doc|
  tokenize(doc).each do |word|
    if index.has_key?(word)
      index[word] &amp;lt;&amp;lt; id
    else
      index[word] = Set.new([id])
    end
  end
end

def search(text, index)
  tokenize(text).map{ |word| index[word] || Set.new }.reduce(:&amp;amp;)
end

index_store = init_index_store(Docs)   =&amp;gt; {&amp;quot;it&amp;quot;=&amp;gt;#&amp;lt;Set: {1, 2, 3}&amp;gt;, &amp;quot;what&amp;quot;=&amp;gt;#&amp;lt;Set: {1, 2}&amp;gt;, &amp;quot;banana&amp;quot;=&amp;gt;#&amp;lt;Set: {3}&amp;gt;}
search(&amp;quot;what is it?&amp;quot;, index_store)     =&amp;gt; #&amp;lt;Set: {1, 2}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，一个最简单是search engine就实现了，当然，我们还没涉及到排序，搜索过程使用的是最简单的 集合布尔模型。下面会涉及 &lt;code&gt;TF-IDF&lt;/code&gt; 相关度排序内容。&lt;/p&gt;

&lt;h2&gt;Sort By  Relevance (按相关度排序)&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/12/28/how-search-and-index-works.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/12/28/how-search-and-index-works.html</guid>
        
        
      </item>
    
      <item>
        <title>Trie 树的应用之敏感词过滤</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://gp1.wac.edgecastcdn.net/806614/photos/photos.500px.net/65000163/55dcc47e193e5540faaa5d97a70f06206f12cbbc/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Trie&lt;/h2&gt;

&lt;p&gt;trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/320px-Trie_example.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;上面的介绍和例子来自维基百科，描述一个保存了8个键的trie结构，&amp;quot;A&amp;quot;, &amp;quot;to&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;ted&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;in&amp;quot;, and &amp;quot;inn&amp;quot;. 图示中标注出完整的单词，只是为了演示trie的原理。&lt;/p&gt;

&lt;h2&gt;敏感词过滤&lt;/h2&gt;

&lt;p&gt;敏感词过滤或关键词提取是Trie树的一个典型应用。拿待过滤词ABCDEF举例，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ABCDEF&lt;/li&gt;
&lt;li&gt;BCDEF&lt;/li&gt;
&lt;li&gt;CDEF&lt;/li&gt;
&lt;li&gt;DEF&lt;/li&gt;
&lt;li&gt;EF&lt;/li&gt;
&lt;li&gt;F&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依次用上面的子串在Trie里walk，看能否walk到叶子节点，如果能，说明包含关键词，并提取出来。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;triez&amp;#39;

words = %w[大叶榕 细叶榕 高山榕 木棉 洋紫荆 樟树 芒果 蝴蝶果 人面子]

trie = Triez.new

words.each { |word| trie[word] = 1 }

post_text = &amp;quot;行道树芒果引市民争相采摘。&amp;quot;

results = Hash.new(0)

(0..post_text.size - 1).each do |i|
  trie.walk(post_text[i..-1]).each do |word_in_trie, _|
    results[word_in_trie] = results[word_in_trie] + 1
  end
end

puts results #=&amp;gt; {&amp;quot;芒果&amp;quot; =&amp;gt; 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;去噪&lt;/h2&gt;

&lt;p&gt;用户可以通过在输入内容中加入空格、特殊符号来干扰敏感词过滤工作。比如芒果可以写成 &lt;code&gt;芒 果&lt;/code&gt;、&lt;code&gt;芒**果&lt;/code&gt;、&lt;code&gt;芒%果&lt;/code&gt;。
解决办法是在过滤之前去噪。还是上面的代码，加上去噪处理：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;triez&amp;#39;

words = %w[大叶榕 细叶榕 高山榕 木棉 洋紫荆 樟树 芒果 蝴蝶果 人面子]

trie = Triez.new

words.each { |word| trie[word] = 1 }

post_text = &amp;quot;行道树芒&amp;amp;&amp;amp;果引市民争相采摘。&amp;quot;

results = Hash.new(0)

post_text = post_text.gsub(/[\s&amp;amp;%$@*]+/, &amp;quot;&amp;quot;)

(0..post_text.size - 1).each do |i|
  trie.walk(post_text[i..-1]).each do |word_in_trie, _|
    results[word_in_trie] = results[word_in_trie] + 1
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Related Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/luikore/triez&lt;/li&gt;
&lt;li&gt;http://zh.wikipedia.org/wiki/Trie&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/23/trie-shu-de-ying-yong.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/23/trie-shu-de-ying-yong.html</guid>
        
        
      </item>
    
      <item>
        <title>Upload resources to AWS using asset sync </title>
        <description>&lt;h3&gt;目的&lt;/h3&gt;

&lt;p&gt;网站的规模逐渐变大，页面加载速度逐渐变慢，其中图片加载的时间是主要的问题。选择把js css 图片这些文件放到aws有一下几个原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;减少本服务器的负载.&lt;/li&gt;
&lt;li&gt;我们网站拥有多个域名，即使是同一个产品，在不同子站显示，图片都要重新加载一遍。一旦统一使用aws，不同子站都是请求同一图片地址，浏览器可以做缓存.&lt;/li&gt;
&lt;li&gt;避免重复繁琐的图片上传管理操作，直接通过代码管理.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;使用&lt;a href=&quot;https://github.com/rumblelabs/asset_sync&quot;&gt;asset sync&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;使用的时候进行简单的配置即可，其中遇到一个问题，插件在dev &amp;amp; staging都可以正确的运行，在production时遇到错误提示&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[2014-11-12T04:17:44.818010 #788] ERROR -- : uninitialized constant AssetSync (NameError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大致的原因：&lt;/p&gt;

&lt;p&gt;由于js css 与图片是能够正确上传到s3的，所以说明插件在 precomplice之后有正确的运行，但是启动unicorn的时候报错，可能是启动的时候不会加载 asset group 的插件, initializar 文件夹内的代码还会加载, 导致AssetSync gem 没有初始化，但是代码中却没有对这个进行判断。&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;if defined?(AssetSync)
...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用后发现的问题，暂时搁置&lt;/h3&gt;

&lt;p&gt;1、无法使用gzip。使用的s3服务器中没有cloudfront，导致无法识别HTTP HEAD中Content-Encoding:gzip的请求，导致使用只能请求到非gz后的 js 与 css 文件，网站整体的pagespeed反而下降了。&lt;/p&gt;

&lt;p&gt;2、工作流程导致无法运用。前端工程师不使用rails server进行代码的编写，例如图片的url需要写成asset&lt;em&gt;host:XXXX,导致使用asset&lt;/em&gt;host指向s3后，他们无法在本地进行开发工作。&lt;/p&gt;

&lt;p&gt;3、代码中历史遗留的问题。旧代码中保留了不少直接使用public的图片，而public的图片不能被上传到s3中，不能直接使用asset sync，需要进行大量的修改。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/14/upload-resources-to-aws-using-asset-sync.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/14/upload-resources-to-aws-using-asset-sync.html</guid>
        
        
      </item>
    
      <item>
        <title>You do not know NewRelic</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/0443c9ac79a6492aad4810c472308b97.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Enabling garbage collection instrumentation&lt;/h2&gt;

&lt;p&gt;默认情况，Newrelic的Transactions response time overview 页面是没有统计GC信息的。如果想要开启只需要在&lt;code&gt;config/initializers/new_relic_unicorn.rb&lt;/code&gt;添加如下代码(如果不是unicorn只需要最后一句)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;# -*- encoding : utf-8 -*-
# Ensure the agent is started using Unicorn.
# This is needed when using Unicorn and preload_app is not set to true.
# See https://docs.newrelic.com/docs/ruby/no-data-with-unicorn
if defined? Unicorn
  ::NewRelic::Agent.manual_start()
  ::NewRelic::Agent.after_fork(:force_reconnect =&amp;gt; true)
end

GC::Profiler.enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Recording deployments&lt;/h2&gt;

&lt;p&gt;New Relic 支持自定义Event，结合 Capistrano 可以把每次发布的时间点划到图表上，题图上到三条粉丝细线就是deployment时刻。
同时，还可以把changelog信息一并记录下来，便于追踪各个版本差异产生的原因，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/7ffc389aed2e1443bbcd5ddf2f74d32c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;实现这样酷的功能只需要两行代码，在&lt;code&gt;deploy.rb&lt;/code&gt;里：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &amp;#39;new_relic/recipes&amp;#39;

after &amp;quot;deploy:updated&amp;quot;, &amp;quot;newrelic:notice_deployment&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你不需要发布就可以测试这个功能是否设置正确：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;cap newrelic:notice_deployment -Snewrelic_desc=&amp;quot;Deploying beta Krakatau release&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Availability monitoring&lt;/h2&gt;

&lt;p&gt;默认情况下，Newrelic会在网站响应速度低到一定阀值邮件通知，也可以手动设置 &lt;code&gt;Availability monitoring&lt;/code&gt;，
需要提供某个页面到URL，如果这个URL一分钟内ping不通就会收到网站 downtime 邮件。&lt;/p&gt;

&lt;h2&gt;Instrumentation Redis&lt;/h2&gt;

&lt;p&gt;只需Gemfile里添加 &lt;code&gt;newrelic-redis&lt;/code&gt; 这个gem，前提是你用了 &lt;code&gt;redis-rb&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一定有同学会问，Redis都那么快了还需要监控？&lt;/p&gt;

&lt;p&gt;原因很简单：&lt;/p&gt;

&lt;p&gt;默认情况下Newrelic会把请求时间算在Ruby／View里，这样你发现一个很慢的页面渲染，你无法定位到具体是什么东西那么慢。
加上 &lt;code&gt;newrelic-redis&lt;/code&gt;之后这部分时间被清晰到记录在Database catalog，并且可以和view其他部分区分开, 细致到每个redis指令执行到时间：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/9532c2a296f8e30b1107f6d93eb1e2fe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Instrumentation Rack Middleware&lt;/h2&gt;

&lt;p&gt;只需要升级 &lt;code&gt;newrelic_rpm&lt;/code&gt; 到 3.9.0 或以上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/22bdbf838583e4d6578ccf01c458aad0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/f9e38c001dd51e040f68223e41ff399c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;JS Error Notification&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/a171111fbe6cf8d6275c5f2d83ca8db9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;就是ExceptionNotify的JS云端版本。当然，这个功能已经有很多人在做了，并不是newrelic首创。但集成到newrelic里却是非常自然，监控异常的同时还可以监控JS错误，何乐而不为呢..&lt;/p&gt;

&lt;h2&gt;NewRelic Insights&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://ruby-china-files.b0.upaiyun.com/photo/2014/74dab3fcea4ddc6d836c4b04c238ab86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这是一个beta项目，NewRelic把自己收集的数据再开放给你。通过自定义的NRQL，让你可以按照自己关心的方式自定义Dashboard。有了API，你可以再把这些数据倒回自己倒应用，和自己已有的数据做进一步分析。&lt;/p&gt;

&lt;h2&gt;Custom Variable&lt;/h2&gt;

&lt;p&gt;Google Analytics 很早就有了，有了这个东西可玩性就提高了一个层次。能做什么就由开发者自己来想像了。&lt;/p&gt;

&lt;h2&gt;NewRelic 和 Twitter的吞吐量相当，数据库使用的是 MySQL（Percona）&lt;/h2&gt;

&lt;p&gt;Renferer: http://www.slideshare.net/newrelic/how-to-build-a-saas-app-with-twitterlike-throughput-on-just-9-servers&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;相关文档
* https://docs.newrelic.com/docs/ruby/garbage-collection
* https://docs.newrelic.com/docs/ruby/recording-deployments-with-the-ruby-agent
* http://blog.newrelic.com/2014/07/02/ruby-agent-now-automatically-instruments-rack-middlewares&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/you-do-not-know-newrelic.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/you-do-not-know-newrelic.html</guid>
        
        
      </item>
    
      <item>
        <title>Chorisia tree</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://gp1.wac.edgecastcdn.net/806614/photos/photos.500px.net/34845288/a093afe9d576137dfdf9537724f27f043685a1a0/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/tree/2014/11/08/the-title-of-the-new-post.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/tree/2014/11/08/the-title-of-the-new-post.html</guid>
        
        
        <category>tree</category>
        
      </item>
    
      <item>
        <title>Fastest Way To Load Data In MySQL</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.runrares.ro/_imgArticol/viteza.jpg&quot; alt=&quot;fast&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/&quot;&gt;Mass inserting data in Rails without killing your performance&lt;/a&gt; 这篇文章里提到Rails快速批量插入数据的几种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use transactions&lt;/li&gt;
&lt;li&gt;Get down and dirty with the raw SQL&lt;/li&gt;
&lt;li&gt;A single mass insert&lt;/li&gt;
&lt;li&gt;Use INSERT statements with multiple VALUES lists with &lt;a href=&quot;https://github.com/zdennis/ar-extensions&quot;&gt;ar-extensions&lt;/a&gt; OR &lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第四种方式是AR方式的70倍左右，已经很快了，还有更快的吗？&lt;/p&gt;

&lt;p&gt;From MySQL Doc:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When loading a table from a text file, use LOAD DATA INFILE. This is usually 20 times faster than using INSERT statements&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SQL语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(15955.1ms)  LOAD DATA LOCAL INFILE &amp;#39;/Users/hooopo/data/out/product_sales_facts.txt&amp;#39;
REPLACE INTO TABLE product_sale_facts FIELDS TERMINATED BY &amp;#39;,&amp;#39; (`id`,`date_id`,`order_id`,`product_id`,`address_id`,`unit_price`,`purchase_price`,`gross_profit`,`quantity`,`channel_id`,`gift`)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入行数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wc -l &amp;lt; /Users/hooopo/data/out/product_sales_facts.txt
 1271413
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大概130w数据用时16秒，平均每秒插入8w条记录左右。如果想用Gem，可以试试 adapter&lt;em&gt;extensions 和 load&lt;/em&gt;data_infile：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/activewarehouse/adapter_extensions&lt;/li&gt;
&lt;li&gt;https://github.com/EmmanuelOga/load&lt;em&gt;data&lt;/em&gt;infile&lt;/li&gt;
&lt;li&gt;https://github.com/jsuchal/activerecord-fast-import&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL Doc里关于LOAD INFILE的详细介绍：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://dev.mysql.com/doc/refman/5.5/en/load-data.html&lt;/li&gt;
&lt;li&gt;http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-load-data-in-mysql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-load-data-in-mysql.html</guid>
        
        
      </item>
    
      <item>
        <title>Fastest Way To Change Schema In MySQL</title>
        <description>&lt;p&gt;在默认情况，Rails的migration会为每个语句单独生成一条SQL来修改表结构。这对新建的表来说是无所谓的，一个create table 或 alter table都是瞬间完成。但是，对于已经存在大量数据的表来说，这样效率极低。刚开始没有注意这样的问题，order表的写法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;rename_column :orders, &amp;quot;shipping_first_name&amp;quot;, &amp;quot;origin_shipping_first_name&amp;quot;
rename_column :orders, &amp;quot;shipping_last_name&amp;quot;, &amp;quot;origin_shipping_last_name&amp;quot;
remove_column :orders, &amp;quot;coupon_value&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果就是，每一个rename&lt;em&gt;column和remove&lt;/em&gt;column执行时间大约4分钟，一共20多个这样的语句，migrate总计执行了近两个小时。因为alter table时mysql需要把整个order表copy to tmp table，而order表是非常庞大的。&lt;/p&gt;

&lt;p&gt;解决办法是把上面的所有修改order的migration合并成一个，并且设置bulk 选项。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;class RenameOldOrderAddressRelatedColumn &amp;lt; ActiveRecord::Migration
  def up
    change_table(:orders, :bulk =&amp;gt; true) do |t|
      t.remove :coupon_code
      t.remove :coupon_value
      t.remove :order_promotion_id
      t.rename :order_status_code_id, :state
      t.remove :in_process
      [:first_name,
       :last_name,
       :phone,
       :street_address,
       :city,
       :zip,
       :company,
       :street_address_2,
       :country,
       :state].each do |column|
        t.rename &amp;quot;shipping_#{column}&amp;quot;, &amp;quot;origin_shipping_#{column}&amp;quot;
        t.rename &amp;quot;billing_#{column}&amp;quot;, &amp;quot;origin_billing_#{column}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，上面的migration只生成一条SQL语句：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ALTER TABLE `orders` DROP `coupon_code`, DROP `coupon_value`, DROP `order_promotion_id`, CHANGE `shipping_first_name` `origin_shipping_first_name` varchar(50) DEFAULT NULL, CHANGE `billing_first_name` `origin_billing_first_name` varchar(50) DEFAULT NULL, CHANGE `shipping_last_name` `origin_shipping_last_name` varchar(50) DEFAULT NULL, CHANGE `billing_last_name` `origin_billing_last_name` varchar(50) DEFAULT NULL, CHANGE `shipping_phone` `origin_shipping_phone` varchar(20) DEFAULT NULL, CHANGE `billing_phone` `origin_billing_phone` varchar(20) DEFAULT NULL, CHANGE `shipping_street_address` `origin_shipping_street_address` varchar(255) DEFAULT NULL, CHANGE `billing_street_address` `origin_billing_street_address` varchar(255) DEFAULT NULL, CHANGE `shipping_city` `origin_shipping_city` varchar(255) DEFAULT NULL, CHANGE `billing_city` `origin_billing_city` varchar(255) DEFAULT NULL, CHANGE `shipping_zip` `origin_shipping_zip` varchar(20) DEFAULT NULL, CHANGE `billing_zip` `origin_billing_zip` varchar(20) DEFAULT NULL, CHANGE `shipping_company` `origin_shipping_company` varchar(255) DEFAULT NULL, CHANGE `billing_company` `origin_billing_company` varchar(255) DEFAULT NULL, CHANGE `shipping_street_address_2` `origin_shipping_street_address_2` varchar(255) DEFAULT NULL, CHANGE `billing_street_address_2` `origin_billing_street_address_2` varchar(255) DEFAULT NULL, CHANGE `shipping_country` `origin_shipping_country` varchar(255) DEFAULT NULL, CHANGE `billing_country` `origin_billing_country` varchar(255) DEFAULT NULL, CHANGE `shipping_state` `origin_shipping_state` varchar(255) DEFAULT NULL, CHANGE `billing_state` `origin_billing_state` varchar(255) DEFAULT NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面修改，整个migration执行时间降到了十分钟以内。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-change-schema-in-mysql.html</link>
        <guid isPermaLink="true">http://shopperplus.github.io/blog/2014/11/08/fastest-way-to-change-schema-in-mysql.html</guid>
        
        
      </item>
    
  </channel>
</rss>
